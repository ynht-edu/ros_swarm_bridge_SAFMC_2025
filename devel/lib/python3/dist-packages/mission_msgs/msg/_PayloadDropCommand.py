# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mission_msgs/PayloadDropCommand.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class PayloadDropCommand(genpy.Message):
  _md5sum = "04ffbe17e6b5d579006db45905e28b91"
  _type = "mission_msgs/PayloadDropCommand"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool drop_command    # True to trigger drop
time drop_time      # Synchronized drop time
bool all_ready      # True when all drones are ready
"""
  __slots__ = ['drop_command','drop_time','all_ready']
  _slot_types = ['bool','time','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       drop_command,drop_time,all_ready

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PayloadDropCommand, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.drop_command is None:
        self.drop_command = False
      if self.drop_time is None:
        self.drop_time = genpy.Time()
      if self.all_ready is None:
        self.all_ready = False
    else:
      self.drop_command = False
      self.drop_time = genpy.Time()
      self.all_ready = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B2IB().pack(_x.drop_command, _x.drop_time.secs, _x.drop_time.nsecs, _x.all_ready))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.drop_time is None:
        self.drop_time = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 10
      (_x.drop_command, _x.drop_time.secs, _x.drop_time.nsecs, _x.all_ready,) = _get_struct_B2IB().unpack(str[start:end])
      self.drop_command = bool(self.drop_command)
      self.all_ready = bool(self.all_ready)
      self.drop_time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B2IB().pack(_x.drop_command, _x.drop_time.secs, _x.drop_time.nsecs, _x.all_ready))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.drop_time is None:
        self.drop_time = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 10
      (_x.drop_command, _x.drop_time.secs, _x.drop_time.nsecs, _x.all_ready,) = _get_struct_B2IB().unpack(str[start:end])
      self.drop_command = bool(self.drop_command)
      self.all_ready = bool(self.all_ready)
      self.drop_time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B2IB = None
def _get_struct_B2IB():
    global _struct_B2IB
    if _struct_B2IB is None:
        _struct_B2IB = struct.Struct("<B2IB")
    return _struct_B2IB
