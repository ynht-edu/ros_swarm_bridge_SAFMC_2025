// Generated by gencpp from file mission_msgs/PayloadDropCommand.msg
// DO NOT EDIT!


#ifndef MISSION_MSGS_MESSAGE_PAYLOADDROPCOMMAND_H
#define MISSION_MSGS_MESSAGE_PAYLOADDROPCOMMAND_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mission_msgs
{
template <class ContainerAllocator>
struct PayloadDropCommand_
{
  typedef PayloadDropCommand_<ContainerAllocator> Type;

  PayloadDropCommand_()
    : drop_command(false)
    , drop_time()
    , all_ready(false)  {
    }
  PayloadDropCommand_(const ContainerAllocator& _alloc)
    : drop_command(false)
    , drop_time()
    , all_ready(false)  {
  (void)_alloc;
    }



   typedef uint8_t _drop_command_type;
  _drop_command_type drop_command;

   typedef ros::Time _drop_time_type;
  _drop_time_type drop_time;

   typedef uint8_t _all_ready_type;
  _all_ready_type all_ready;





  typedef boost::shared_ptr< ::mission_msgs::PayloadDropCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mission_msgs::PayloadDropCommand_<ContainerAllocator> const> ConstPtr;

}; // struct PayloadDropCommand_

typedef ::mission_msgs::PayloadDropCommand_<std::allocator<void> > PayloadDropCommand;

typedef boost::shared_ptr< ::mission_msgs::PayloadDropCommand > PayloadDropCommandPtr;
typedef boost::shared_ptr< ::mission_msgs::PayloadDropCommand const> PayloadDropCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mission_msgs::PayloadDropCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mission_msgs::PayloadDropCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mission_msgs::PayloadDropCommand_<ContainerAllocator1> & lhs, const ::mission_msgs::PayloadDropCommand_<ContainerAllocator2> & rhs)
{
  return lhs.drop_command == rhs.drop_command &&
    lhs.drop_time == rhs.drop_time &&
    lhs.all_ready == rhs.all_ready;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mission_msgs::PayloadDropCommand_<ContainerAllocator1> & lhs, const ::mission_msgs::PayloadDropCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mission_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mission_msgs::PayloadDropCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mission_msgs::PayloadDropCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mission_msgs::PayloadDropCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mission_msgs::PayloadDropCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mission_msgs::PayloadDropCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mission_msgs::PayloadDropCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mission_msgs::PayloadDropCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "04ffbe17e6b5d579006db45905e28b91";
  }

  static const char* value(const ::mission_msgs::PayloadDropCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x04ffbe17e6b5d579ULL;
  static const uint64_t static_value2 = 0x006db45905e28b91ULL;
};

template<class ContainerAllocator>
struct DataType< ::mission_msgs::PayloadDropCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mission_msgs/PayloadDropCommand";
  }

  static const char* value(const ::mission_msgs::PayloadDropCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mission_msgs::PayloadDropCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool drop_command    # True to trigger drop\n"
"time drop_time      # Synchronized drop time\n"
"bool all_ready      # True when all drones are ready\n"
;
  }

  static const char* value(const ::mission_msgs::PayloadDropCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mission_msgs::PayloadDropCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.drop_command);
      stream.next(m.drop_time);
      stream.next(m.all_ready);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PayloadDropCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mission_msgs::PayloadDropCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mission_msgs::PayloadDropCommand_<ContainerAllocator>& v)
  {
    s << indent << "drop_command: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.drop_command);
    s << indent << "drop_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.drop_time);
    s << indent << "all_ready: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.all_ready);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MISSION_MSGS_MESSAGE_PAYLOADDROPCOMMAND_H
